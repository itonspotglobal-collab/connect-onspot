 for WhyOnSpotValueCalculator.tsx We already have a “Download Report” button that shows an alert. We need a real download that captures:
* Current Input fields (country, state, city, wage, hours, weeks, benefits, overhead, outsource %, management fee, roles with department + headcount)
* Annual Savings
* Cost Reduction (percentage)
* Efficiency Hours/Year
Goal
Make Download Report generate a PDF on the client (no server calls) and trigger a download. Keep styling simple and robust.

Tasks
1. Add dependencies
Install jsPDF (minimal footprint; no table plugin needed).
2. npm i jspdf
3. If ESM/types are needed:
4. npm i -D @types/jspdf
5. Implement a report builder inside WhyOnSpotValueCalculator.tsx
    * Create a helper collectReportData() to gather current state and computed KPIs.
    * Add handleDownloadReport() that:
        * Imports jsPDF
        * Builds a single-page (or multi-page if needed) PDF
        * Writes:
            * Title + timestamp
            * Section: “Inputs”
            * Section: “Projected Results”
        * Uses existing helpers formatCurrency, formatPercentage, formatNumber where applicable to keep localization consistent.
        * Calls doc.save('OnSpot-Value-Report.pdf').
6. Wire the button
    * Replace the temporary alert with onClick={handleDownloadReport}.
    * Keep the same data-testid="button-download-report".
7. Edge cases
    * If team roles overflow the page height, add page breaks (doc.addPage()).
    * Guard against divide-by-zero metrics (already handled in calculations).

Code changes (drop into the component)

// 1) Import at top of file (after React imports)
import jsPDF from "jspdf";

// 2) Helper to collect current state into a flat object
const collectReportData = () => {
  const inputs = {
    country,
    state,
    city,
    minWage: `$${minWage.toFixed(2)}/hour`,
    avgWorkHoursPerWeek: `${avgWorkHoursPerWeek}`,
    annualWorkWeeks: `${annualWorkWeeks}`,
    benefits: `${benefits}%`,
    overhead: `${overhead}%`,
    outsourcePercentage: `${outsourcePercentage[0]}%`,
    managementFeePerSeat: `$${managementFeePerSeat}/mo`,
    roles: jobRoles.map(r => ({
      title: r.title,
      department: r.department,
      headcount: r.headcount
    })),
  };

  const kpis = {
    annualSavings: (() => {
      const f = formatCurrency(calculations.annualSavings);
      return `${f.symbol}${f.value}`;
    })(),
    costReduction: formatPercentage(calculations.savingsPercentage),
    efficiencyHoursPerYear: formatNumber(calculations.efficiencyHours),
  };

  return { inputs, kpis };
};

// 3) PDF generator
const handleDownloadReport = () => {
  const { inputs, kpis } = collectReportData();
  const doc = new jsPDF({ unit: "pt" }); // points for consistent spacing

  let y = 56;
  const line = (text: string, x = 56) => {
    doc.text(text, x, y);
    y += 18;
  };

  // Title
  doc.setFont("helvetica", "bold");
  doc.setFontSize(18);
  line("OnSpot Value Calculator — Report");

  doc.setFont("helvetica", "normal");
  doc.setFontSize(10);
  line(new Date().toLocaleString());
  y += 12;

  // Inputs
  doc.setFont("helvetica", "bold");
  doc.setFontSize(14);
  line("Inputs");
  doc.setFont("helvetica", "normal");
  doc.setFontSize(11);

  line(`Country: ${inputs.country}`);
  line(`State/Province: ${inputs.state}`);
  line(`City: ${inputs.city}`);
  line(`Hourly Local Minimum Wage: ${inputs.minWage}`);
  line(`Hours/Week: ${inputs.avgWorkHoursPerWeek}`);
  line(`Annual Work Weeks: ${inputs.annualWorkWeeks}`);
  line(`Benefits: ${inputs.benefits}`);
  line(`Overhead: ${inputs.overhead}`);
  line(`Outsource Percentage: ${inputs.outsourcePercentage}`);
  line(`Management Fee/Seat: ${inputs.managementFeePerSeat}`);

  y += 8;
  doc.setFont("helvetica", "bold");
  line("Roles");
  doc.setFont("helvetica", "normal");
  inputs.roles.forEach((r, idx) => {
    const txt = `${idx + 1}. ${r.title} (${r.department}) — Headcount: ${r.headcount}`;
    if (y > 760) { doc.addPage(); y = 56; }
    line(txt);
  });

  // Results
  y += 20;
  if (y > 760) { doc.addPage(); y = 56; }
  doc.setFont("helvetica", "bold");
  doc.setFontSize(14);
  line("Projected Results");
  doc.setFont("helvetica", "normal");
  doc.setFontSize(12);

  line(`Annual Savings: ${kpis.annualSavings}`);
  line(`Cost Reduction: ${kpis.costReduction}`);
  line(`Efficiency Hours/Year: ${kpis.efficiencyHoursPerYear}`);

  // Footer
  y = 790;
  doc.setFontSize(9);
  doc.text("Generated by OnSpot Value Calculator", 56, y);

  doc.save("OnSpot-Value-Report.pdf");
};

// 4) Wire the button (replace existing alert)
<Button
  variant="outline"
  size="lg"
  className="text-base px-8"
  onClick={handleDownloadReport}
  data-testid="button-download-report"
>
  <Download className="w-5 h-5 mr-2" />
  Download Report
</Button>

Acceptance criteria
* Clicking Download Report downloads OnSpot-Value-Report.pdf.
* PDF includes:
    * Inputs: Country, State/Province, City, Min Wage, Hours/Week, Annual Weeks, Benefits, Overhead, Outsource %, Management Fee, Roles (title/department/headcount).
    * KPIs: Annual Savings, Cost Reduction, Efficiency Hours/Year.
* Works in Chrome, Safari, and Edge (desktop).
* No server calls; all client-side.

Suggested manual tests
1. Change Country/State/City → Download → verify inputs reflect selection.
2. Change Role Type & Headcount → Download → verify roles list reflects changes.
3. Adjust Outsource % → Download → verify KPIs change.
4. Add multiple roles to force a second PDF page → Verify page break.