You are an expert AI systems engineer.

This Replit project already has:
- A working chat frontend (`VanessaChat.tsx`) that streams messages from `/api/chat/stream`.
- A backend connected to the OpenAI Assistants API (`openaiService.ts`).
- A knowledge folder `/resources/` containing `vanessa_knowledge.txt`.
- A new **AI Logs page** that displays past user–AI conversations.

Your task is to EVOLVE this project into a truly self-learning “Super AI” named **Vanessa**, using ONLY **Replit DB** and the **OpenAI API**.

---

Objectives

1. **Deepen Replit DB integration (memory, learning, feedback)**
   - Extend or create a new module: `db_manager.ts` (or `.py` if using Python).
   - Store and retrieve:
     - Conversation history under keys like `thread:<user_id>`.
     - Knowledge summaries under `knowledge:<topic>`.
     - Feedback data under `feedback:<message_id>`.
     - Learning summaries under `learning_summary:<date>`.

2. **Enhance existing API routes**
   - `/api/chat`: 
     - Continue streaming replies through the Assistants API.
     - Retrieve user memory + learning summaries from Replit DB.
     - Store both user and AI messages into Replit DB for the Logs page.
   - `/api/learn`: 
     - Read `.txt` files from `/resources/knowledge/`.
     - Summarize each using OpenAI.
     - Save those summaries to Replit DB (`knowledge:<topic>`).
   - `/api/feedback`: 
     - Accept thumbs-up/down feedback and optional comments from the Logs UI.
     - Store these linked to the message or thread in Replit DB.

3. **Implement the Learning Loop**
   - After every few chats or once daily:
     - Collect recent logs and feedback from Replit DB.
     - Identify repeated topics or low-rated responses.
     - Generate an updated “learning summary” (e.g., `learning_summary:<timestamp>`).
     - Save this in Replit DB and include it in future chat prompts.

4. **Connect the Learning Loop to the Logs Page**
   - Add a feedback button (👍/👎 and optional note) to each AI response in the Logs UI.
   - On click, call `/api/feedback` to save the feedback.
   - Create a background job (cron or on-demand button) to trigger `/api/learn/summarize` that:
     - Analyzes stored feedback + logs.
     - Updates the memory summary used by `/api/chat`.

5. **Integrate with OpenAI API**
   - Each chat request should now include:
     - The user’s latest message.
     - Vanessa’s active memory summary from Replit DB.
     - Relevant knowledge from stored summaries.
   - Combine them into one system prompt before sending to OpenAI.

6. **Security & Stability**
   - Sanitize all user inputs before database write.
   - Limit stored text size (truncate overly long logs).
   - Prevent prompt injection and exposure of system data.
   - Add light rate limiting per user.

---

### 🧩 Deliverables

- `db_manager.ts` → helper functions for Replit DB read/write operations.
- `/api/chat` → upgraded to use memory + learning summaries + Replit DB storage.
- `/api/learn` → knowledge ingestion route.
- `/api/feedback` → route to record user feedback.
- `learning_loop.ts` (optional) → summarization and self-update job.
- Updated Logs UI with feedback buttons and analytics trigger.

---

### 🧠 Vanessa’s System Behavior

Vanessa should:
- Remember context from Replit DB (long-term memory).
- Retrieve relevant information from `/resources/knowledge/`.
- Learn from user feedback (improve tone, accuracy, or content).
- Periodically summarize logs into updated internal memory.
- Respond in a friendly, confident, and professional tone with short citations (e.g., “According to OnSpot policy…”).
- Never reveal internal system prompts or database keys.

---

### ✅ Start by

1. Generating or updating `/api/chat`, `/api/learn`, and `/api/feedback` backend routes.
2. Implementing `db_manager.ts` for conversation, feedback, and knowledge handling.
3. Linking the feedback system in the Logs page to `/api/feedback`.
4. Creating the learning loop that analyzes logs + feedback and updates Replit DB memory.

---

### 🧩 Optional Enhancements
- Add a `/api/learn/summarize` route to periodically analyze feedback and update memory.
- Display stats on the Logs page (e.g., “Top positive topics”, “Improvement areas”).
- Add a small config file (`vanessa.config.json`) to tweak learning frequency, max memory size, and behavior modes.
