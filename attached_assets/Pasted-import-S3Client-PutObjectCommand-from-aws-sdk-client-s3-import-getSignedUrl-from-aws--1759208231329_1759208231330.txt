import { S3Client, PutObjectCommand } from "@aws-sdk/client-s3";
import { getSignedUrl } from "@aws-sdk/s3-request-presigner";

app.post("/api/object-storage/upload-url", authenticateJWT, async (req: any, res) => {
  try {
    const { fileName, contentType } = req.body;

    console.log(`üì§ Upload URL request [${req.requestId}]:`, { fileName, contentType });

    // Validate required parameters
    if (!fileName || !contentType) {
      console.error(`‚ùå Missing parameters [${req.requestId}]:`, { fileName, contentType });
      return res.status(400).json({ error: "fileName and contentType required" });
    }

    const awsRegion = process.env.AWS_REGION;
    const awsBucket = process.env.AWS_BUCKET_NAME;
    const awsAccessKeyId = process.env.AWS_ACCESS_KEY_ID;
    const awsSecretAccessKey = process.env.AWS_SECRET_ACCESS_KEY;

    if (!awsRegion || !awsBucket || !awsAccessKeyId || !awsSecretAccessKey) {
      console.error(`‚ùå S3 not configured [${req.requestId}]`);
      return res.status(500).json({ error: "S3 not configured" });
    }

    // Create S3 client
    const s3Client = new S3Client({
      region: awsRegion,
      credentials: {
        accessKeyId: awsAccessKeyId,
        secretAccessKey: awsSecretAccessKey,
      },
    });

    // Generate unique key
    const timestamp = Date.now();
    const key = `uploads/${timestamp}-${fileName}`;

    // Create signed URL
    const command = new PutObjectCommand({
      Bucket: awsBucket,
      Key: key,
      ContentType: contentType,
    });

    const signedUrl = await getSignedUrl(s3Client, command, { expiresIn: 60 }); // 1 min expiration

    // Response format required by ObjectUploader.tsx
    const response = {
      url: signedUrl,
      method: "PUT",
      headers: { "Content-Type": contentType },
      fileUrl: `https://${awsBucket}.s3.${awsRegion}.amazonaws.com/${key}`,
    };

    console.log(`‚úÖ Signed URL generated [${req.requestId}]:`, { key });
    res.json(response);
  } catch (error: any) {
    console.error(`‚ùå S3 upload URL generation failed [${req.requestId}]:`, {
      error: error.message,
      stack: error.stack,
    });
    res.status(500).json({ error: "Failed to generate upload URL" });
  }
});
