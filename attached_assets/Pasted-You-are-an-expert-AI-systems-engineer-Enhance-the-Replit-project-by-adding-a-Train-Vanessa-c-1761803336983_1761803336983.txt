You are an expert AI systems engineer.

Enhance the Replit project by adding a **"Train Vanessa"** chat feature inside the **Vanessa Responses admin page**.

This chat acts just like the main chat interface but is used **exclusively for training Vanessa** — allowing admins to teach or correct her conversationally.  
All learning from this chat should be stored in her **long-term memory** and knowledge base.

---

### 🎯 Objectives

1. **Add “Train Vanessa” Button**
   - In `VanessaResponses.tsx` (admin view):
     - Add a button labeled **"Train Vanessa"** at the top right or header section.
     - When clicked, open a modal or side panel with a mini chat interface (similar to VanessaChat).
     - Only available to vanessa-resposes page.

2. **Training Chat Interface**
   - Create a new React component:  
     ```
     client/src/components/TrainingChat.tsx
     ```
   - Functionality:
     - Works like the existing Vanessa chat — shows alternating “User” and “Vanessa” messages.
     - Sends messages to a new backend route: `/api/train/chat`
     - Displays Vanessa’s responses in real-time stream.

   - Example UI flow:
     ```
     User (Admin): Who is OnSpot CEO?
     Vanessa: The CEO of OnSpot is Nur Laminero.
     User: The CEO of OnSpot is Nur Naderev Laminero, you should generate the full name.
     Vanessa: Understood, I’ll remember that correction.
     ```

3. **New Backend Route: `/api/train/chat`**
   - Clone functionality from `/api/chat` but add admin-only access.
   - When the admin sends a message:
     - Use the OpenAI API to generate Vanessa’s response.
     - Detect correction phrases (`you should`, `actually`, `remember that`, etc.).
     - Save the correction to Replit DB and `vanessa_knowledge.txt`.

   - Example backend logic:
     ```ts
     if (userMessage.match(/you should|actually|remember that|correct/i)) {
       const topic = extractTopicFromText(userMessage);
       await db.set(`memory:${topic}`, userMessage);
       fs.appendFileSync("/resources/vanessa_knowledge.txt", `\n=== Admin Training (${new Date().toISOString()}) ===\n${userMessage}\n`);
       return "Understood, I’ve updated my memory with that information.";
     }
     ```

4. **Training Chat Storage**
   - Store training conversations separately in PostgreSQL under a new table:
     ```sql
     CREATE TABLE training_logs (
       id SERIAL PRIMARY KEY,
       admin_id TEXT,
       user_message TEXT,
       ai_response TEXT,
       created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
     );
     ```
   - Log example:
     ```
     [2025-10-30 10:02Z] Admin (val@onspotglobal.com): "The CEO is Nur Naderev Laminero"
     Vanessa: "Understood, I’ll remember that."
     ```

5. **Memory & Knowledge Updates**
   - Each correction in this chat updates:
     - Replit DB → `memory:<topic>`
     - `/resources/vanessa_knowledge.txt` → appended summary
   - Logs:
     ```
     🧠 Admin training update → topic: CEO
     ✅ Vanessa memory & knowledge updated
     ```

6. **Chat Streaming**
   - Support message streaming like `/api/chat/stream`.
   - Add route `/api/train/chat/stream` for real-time response updates.

7. **Security**
   - Only accessible if `user.role === "admin"`.
   - Block non-admin requests to `/api/train/chat`.
   - Store no confidential data in DB.

---

### ✅ Deliverables

| Component | Purpose |
|------------|----------|
| `TrainingChat.tsx` | Admin-only chat interface for live training |
| “Train Vanessa” button | Opens the training chat modal on `VanessaResponses` |
| `/api/train/chat` | Backend route for admin-only conversational training |
| `/api/train/chat/stream` | Real-time response streaming |
| `training_logs` table | Stores all admin training sessions |
| Integration with Replit DB | Updates short-term memory |
| Integration with `vanessa_knowledge.txt` | Updates long-term memory |

---

### ⚙️ Behavior Flow

1. Admin clicks **Train Vanessa** → opens chat modal.
2. Admin starts a conversation.
3. If admin corrects Vanessa (e.g. “You should say Nur Naderev Laminero”):
   - Vanessa responds: “Understood, I’ll remember that.”
   - System saves the correction to DB and knowledge file.
4. Next time any user asks “Who is OnSpot CEO?”, Vanessa answers correctly.

---

### 🧩 Example Conversation (Training Mode)

**Admin (in VanessaResponses):**
> Who is OnSpot CEO?

**Vanessa:**  
> The CEO of OnSpot is Nur Laminero.

**Admin:**  
> The CEO of OnSpot is Nur Naderev Laminero, you should generate the full name.

**Vanessa:**  
> Understood, I’ll remember that correction.

✅ System console:
